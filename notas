Aquí tienes el texto corregido:

**Curso realizado por Midudev**
Link de contenido: [https://aprendenode.dev](https://aprendenode.dev)

**Clase 1:**
1. **¿Qué es Node.js?**
    - Es un entorno de ejecución de JavaScript.
    - Es asincrónico con entradas/salidas de datos y tiene una arquitectura orientada a eventos.

2. **¿Qué es V8?**
    - Es el motor de JavaScript que utiliza Chrome, lo que hace que JavaScript se ejecute muy rápido.

3. **¿Qué significa que está "orientado a eventos"?**
    - Node.js tiene un bucle que maneja las solicitudes que llegan cada vez que ocurre un evento.
    - Esto se realiza en un solo hilo (thread).
    - Node.js ejecuta tareas mientras espera respuestas de otras.

4. Luego de instalar todo (Node.js / nvm), ¡a trabajar!

5. En PowerShell:
    - Escribe "node" y ya estás listo para ejecutar código.
    - Esta consola ejecuta JavaScript como la herramienta de desarrollo del navegador.

6. Después de iniciar el repositorio, crea "index.js" y puedes ejecutar el código en Node.js con "node index.js".

7. **FUNDAMENTAL:** En Node.js, no tenemos "window".
    - Para este problema, tenemos un objeto global para los entornos: "globalThis".
    - Esta variable se puede acceder desde cualquier parte.
    - "globalThis" equivale a "window" en el navegador.
    - "globalThis" equivale a "nodejs" en Node.js.
    - Todas las variables que se utilizan (console, Math...) provienen de "globalThis".

8. Patrón de diseño: Separa tu código en diferentes archivos.

9. Los archivos ".js" por defecto utilizan CommonJS (module.export, require).
   Los archivos ".mjs" utilizan ES Modules (recomendado).
   Los archivos ".cjs" utilizan CommonJS (mejor no utilizarlo, se utiliza hasta poder cambiarlo en el "package.json").
   En ES Modules, es obligatorio usar extensiones, pero los empaquetadores hacen magia para que no sea necesario.

10. **Módulos nativos:** A partir de Node.js 16, se recomienda utilizar "node:''".
    - "os": información del sistema operativo.
    - "fs": sistema de archivos.
    - "path".

11. **Método síncrono:** Termina con "Sync".
    **Método asíncrono:** No tiene "Sync".

12. Para pasar a promesas, debes estar trabajando con código asíncrono y simplemente agregar "/promises" al módulo nativo. Después de esto, puedes usar promesas en lugar de callbacks.

13. Para utilizar "await", necesitas trabajar con archivos ".mjs" o utilizar una función autoinvocada.

14. **Path:** Siempre es importante unir las rutas con "path.join" ya que el elemento de unión depende del sistema operativo ("console.log(path.sep)").

15. **npm:** Debes separar la librería del comando.

16. **Pasos:**
    - "npm init" (responde las preguntas) o "npm init -y".

17. **Dependencia de desarrollo:** EsLint (siempre es útil).

**Clase 2:**

1. Al iniciar el servidor, notamos que si realizamos una solicitud, el "console.log" se ejecuta dos veces. Esto se debe a la solicitud del favicon; la segunda solicitud es para obtenerlo.

2. **¿Qué es HTTP?**
    - Es el "Protocolo de Transferencia de Hipertexto" utilizado para transmitir información, ampliamente usado en Internet.

3. Modo para que el servidor se actualice automáticamente al aplicar algún cambio:
    - "node --watch ..." (experimental)
    - "nodemon" (un poco más lento): No lo instales de forma global ("-D" para dependencia de desarrollo). Luego, en los scripts: `"dev": "nodemon 1.http.js"`.

4. **Cabeceras (headers):**
    - text/plain
    - text/html
    - image/png
    - image/

5. Instala la extensión "Rest Client" y crea el archivo "api.http" con las peticiones.

6. Pasos para el POST:
    a) Piensa que los datos llegan como una tubería y se procesan por partes.
    b) Por cada "chunk", realiza alguna acción.
    c) Los "chunks" son binarios y deben convertirse a texto con "toString".

7. Todo lo aprendido se traslada a Express: `npm i express -E` (debe ser exacto ya que es de producción). Express es un framework.

8. **Middleware:** En pocas palabras, las solicitudes pasan por él, se procesan, se llama a "next" y luego se maneja la solicitud. Puedes usar este paso para validar las solicitudes.
