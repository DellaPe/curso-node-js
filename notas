Aquí tienes el texto corregido:

**Curso realizado por Midudev**
Link de contenido: [https://aprendenode.dev](https://aprendenode.dev)

*-------------------------------------------------------------------------------------------------------------*

*Clase 1:*

1. **¿Qué es Node.js?**
    - Es un entorno de ejecución de JavaScript.
    - Es asincrónico con entradas/salidas de datos y tiene una arquitectura orientada a eventos.

2. **¿Qué es V8?**
    - Es el motor de JavaScript que utiliza Chrome, lo que hace que JavaScript se ejecute muy rápido.

3. **¿Qué significa que está "orientado a eventos"?**
    - Node.js tiene un bucle que maneja las solicitudes que llegan cada vez que ocurre un evento.
    - Esto se realiza en un solo hilo (thread).
    - Node.js ejecuta tareas mientras espera respuestas de otras.

4. Luego de instalar todo (Node.js / nvm), ¡a trabajar!

5. En PowerShell:
    - Escribe "node" y ya estás listo para ejecutar código.
    - Esta consola ejecuta JavaScript como la herramienta de desarrollo del navegador.

6. Después de iniciar el repositorio, crea "index.js" y puedes ejecutar el código en Node.js con "node index.js".

7. **FUNDAMENTAL:** En Node.js, no tenemos "window".
    - Para este problema, tenemos un objeto global para los entornos: "globalThis".
    - Esta variable se puede acceder desde cualquier parte.
    - "globalThis" equivale a "window" en el navegador.
    - "globalThis" equivale a "nodejs" en Node.js.
    - Todas las variables que se utilizan (console, Math...) provienen de "globalThis".

8. Patrón de diseño: Separa tu código en diferentes archivos.

9. Los archivos ".js" por defecto utilizan CommonJS (module.export, require).
   Los archivos ".mjs" utilizan ES Modules (recomendado).
   Los archivos ".cjs" utilizan CommonJS (mejor no utilizarlo, se utiliza hasta poder cambiarlo en el "package.json").
   En ES Modules, es obligatorio usar extensiones, pero los empaquetadores hacen magia para que no sea necesario.

10. **Módulos nativos:** A partir de Node.js 16, se recomienda utilizar "node:''".
    - "os": información del sistema operativo.
    - "fs": sistema de archivos.
    - "path".

11. **Método síncrono:** Termina con "Sync".
    **Método asíncrono:** No tiene "Sync".

12. Para pasar a promesas, debes estar trabajando con código asíncrono y simplemente agregar "/promises" al módulo nativo. Después de esto, puedes usar promesas en lugar de callbacks.

13. Para utilizar "await", necesitas trabajar con archivos ".mjs" o utilizar una función autoinvocada.

14. **Path:** Siempre es importante unir las rutas con "path.join" ya que el elemento de unión depende del sistema operativo ("console.log(path.sep)").

15. **npm:** Debes separar la librería del comando.

16. **Pasos:**
    - "npm init" (responde las preguntas) o "npm init -y".

17. **Dependencia de desarrollo:** EsLint (siempre es útil).

*-------------------------------------------------------------------------------------------------------------*

*Clase 2:*

1. Al iniciar el servidor, notamos que si realizamos una solicitud, el "console.log" se ejecuta dos veces. Esto se debe a la solicitud del favicon; la segunda solicitud es para obtenerlo.

2. **¿Qué es HTTP?**
    - Es el "Protocolo de Transferencia de Hipertexto" utilizado para transmitir información, ampliamente usado en Internet.

3. Modo para que el servidor se actualice automáticamente al aplicar algún cambio:
    - "node --watch ..." (experimental)
    - "nodemon" (un poco más lento): No lo instales de forma global ("-D" para dependencia de desarrollo). Luego, en los scripts: `"dev": "nodemon 1.http.js"`.

4. **Cabeceras (headers):**
    - text/plain
    - text/html
    - image/png
    - image/

5. Instala la extensión "Rest Client" y crea el archivo "api.http" con las peticiones.

6. Pasos para el POST:
    a) Piensa que los datos llegan como una tubería y se procesan por partes.
    b) Por cada "chunk", realiza alguna acción.
    c) Los "chunks" son binarios y deben convertirse a texto con "toString".

7. Todo lo aprendido se traslada a Express: `npm i express -E` (debe ser exacto ya que es de producción). Express es un framework.

8. **Middleware:** En pocas palabras, las solicitudes pasan por él, se procesan, se llama a "next" y luego se maneja la solicitud. Puedes usar este paso para validar las solicitudes.

*-------------------------------------------------------------------------------------------------------------*

*Clase 3:*

1. **REST:**
    - Arquitectura de software
    - 2000 - Roy  Fielding
    -
2. **Principios REST**
    - Escalabilidad
    - Simplicidad
    - Visibilidad
    - Portabilidad
    - Fiabilidad
    - Facíl de modificar

3. **Resources (REST)**
    - Todo es considerado recurso.
    - Cada recurso se identifica con una URL.
    - Verbos HTTP: para definir las operaciones con los recursos (get, post, put...).
    - Representaciones: Los recursos pueden tener varias representaciones. El cliente puede 
    - Stateless: Cada solicitud (al server) debe contener toda la info necesaria para entender esa solicitud. El servidor no debe mantener ningun estado sobre el cliente entre solicitudes!
    - Interfaz uniforme
    - Separación de conceptos: Permite que el cliente y servidor evolucionen de forma separada.

4. **:id**: Es el paramero de la URL (:'algo' )

5. **ZOD**: Una de las tantas herramientas de validación

6. **Idempotencia**: Propiedad de realizar una acción determinada  varias veces y aún así conseguir siempre el mismo resultado que se obtiendría al hacerlo una vez. Ademas habla del estado interno de las cosas (Necesario para saber las diferencias entre P-P-P)

7. **P-P-P**
    POST: Crear nuevo recurso en el servidor (/movies) (no es idempotente, siempre creando un nuevo recurso)
    PUT: Actualizar totalmente un recurso o crearlo si no existe. (/movies/:id) (si es idempotente)
    PATCH: Modificar un recurso parcialmente (/movies/:id) (puede ser o no idempotente)

8. **Server**
    npx servor "dirección carpetra": Sirve la pag un un url

9. **METODOS**
    Normales: GET - HEAD - POST
    Complejos: PUT - PATH - DELETE (CORS PRE-FLIGHT)

10. **CORS PRE-FLIGHT**
    Signifuca que requiere una petición especial (OPTIONS), es como que quiere saber antes algo. De aca el app.options

11. **Problema CORS**
    Otra forma de solucionarlo es npm i cors pero y usar app.use(cors()) pero este usa '*', deja pasar cualqueir origen.

*-------------------------------------------------------------------------------------------------------------*

*Clase 4*
(Pasar a ESModules)

1. Cambiar el type de modulo en el package.json (que por defencot es "type": "commonjs")

2. Es buena practica poner las terminaciones. A pesar de que ande.

3. No puedes importa json asi como si nada en ES => al import => assert { type : 'json' }
    Al dia de hoy (1/10/2023) Es experimentar y al usarlo lo dice la consola. Pero pero... ya cambio a with que esta en face 3 pero no se puede usar todavia
    * del futuro import movies from '...' with { type : 'json' }

    2 formas de hacer esto
    *   import fs from 'node:fs'
        const movies = JSON.parse(fs.readFileSync('./movies.js', 'utf-8'))
    
    *   import { createRequire } from 'node:module'
        const require = createRequire(import.meta.url)
        const movies = require('./movies.json')
        (Mejor por ahora, ya que es nartiva y no usamos parse)

4. **Router (express)**
    Nos permite crear un enrutador, que, vamos a poder responder todo los paths

5. **MVC: Modelo Vista Controlador** 
    Es un patron de arquitectuira que te obliga a separar tu extructura en 3 componentes interconectados
    * Modelo: Representa la logica del negocio
    * Controlador: es el que interactura entre el modelo y la vista.
    * Vista: interfaz del usuario

6. Implemento MVC teniendo como contrato que todo sea una promesa, ya que no sabemos como obtenemos las pelis y va hacer funcional para lo que venga.
    Ademas, tenemos que manejar los error con un try catch pero lo dejamos para un middlewares

*-------------------------------------------------------------------------------------------------------------*

*Clase 5*

1. **Creat base de datos** (Laragon)
    -- Crear tabla
DROP DATABASE iF EXISTS movies_database;
CREATE DATABASE movies_database;
-- Usar tabla
USE movies_database;
-- Creación
CREATE TABLE movies (
	id BINARY(16) PRIMARY KEY DEFAULT (UUID_TO_BIN(UUID())),
	title VARCHAR(255) NOT NULL,
	year INT NOT NULL, 
	director VARCHAR(255) NOT NULL,
	duration SMALLINT UNSIGNED NOT NULL,
	rate DECIMAL(2,1) UNSIGNED NOT NULL,
	poster TEXT NOT NULL
);
CREATE TABLE genres (
	id INT AUTO_INCREMENT PRIMARY KEY,
	`name` VARCHAR(255) NOT NULL UNIQUE
);
CREATE TABLE movie_genres (
    movie_id BINARY(16),
    genre_id INT,
    PRIMARY KEY (movie_id, genre_id),
    FOREIGN KEY (movie_id) REFERENCES movies(id),
    FOREIGN KEY (genre_id) REFERENCES genres(id)
);
INSERT INTO movies (id, title, year, director, duration, rate, poster) VALUES
(UUID_TO_BIN(UUID()), 'The Dark Knight', 2008, 'Christopher Nolan', 152, 9.0,'https://i.ebayimg.com/images/g/yokAAOSw8w1YARbm/s-l1200.jpg'),
(UUID_TO_BIN(UUID()), 'Pulp Fiction', 1994, 'Quentin Tarantino', 154, 8.9, 'https://www.themoviedb.org/t/p/original/vQWk5YBFWF4bZaofAbv0tShwBvQ.jpg'),
(UUID_TO_BIN(UUID()), 'Inception', 2010, 'Christopher Nolan', 148, 8.8, 'https://m.media-amazon.com/images/I/91Rc8cAmnAL._AC_UF1000,1000_QL80_.jpg');
INSERT INTO genres (`name`) VALUES
('Drama'), 
('Action'),
('Crime'),
('Adventure'),
('Sci-Fi'),
('Romance'),
('Comedy'),
('Fantasy'),
('Biography'),
('Terror');
INSERT INTO movie_genres (movie_id, genre_id) VALUES
((SELECT id FROM movies WHERE title = 'Inception'), (SELECT id FROM genres WHERE `name` = 'Action')),
((SELECT id FROM movies WHERE title = 'Inception'), (SELECT id FROM genres WHERE `name` = 'Adventure')),
((SELECT id FROM movies WHERE title = 'Inception'), (SELECT id FROM genres WHERE `name` = 'Sci-Fi')),
((SELECT id FROM movies WHERE title = 'The Dark Knight'), (SELECT id FROM genres WHERE `name` = 'Action')),
((SELECT id FROM movies WHERE title = 'The Dark Knight'), (SELECT id FROM genres WHERE `name` = 'Adventure')),
((SELECT id FROM movies WHERE title = 'The Dark Knight'), (SELECT id FROM genres WHERE `name` = 'Drama')),
((SELECT id FROM movies WHERE title = 'Pulp Fiction'), (SELECT id FROM genres WHERE `name` = 'Crime')),
((SELECT id FROM movies WHERE title = 'Pulp Fiction'), (SELECT id FROM genres WHERE `name` = 'Drama'));
SELECT *, BIN_TO_UUID(id), title, year, director, duration, rate, poster  id FROM movies;

2. **Modelo MySQL**
    Biblioteca recomendad para conectarme mysql2 (la otra esta vieja pero funca)
    pnpm i --save mysql2